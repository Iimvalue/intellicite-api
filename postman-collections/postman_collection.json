{
	"info": {
		"_postman_id": "07722ae3-afae-4e49-8c82-422732ba8e0e",
		"name": "IntelliCite API",
		"description": "API collection for testing IntelliCite user authentication and profile management endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31924264"
	},
	"item": [
		{
			"name": "Papers",
			"item": [
				{
					"name": "Get paper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user profile data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"    pm.expect(jsonData.data.user).to.have.property('searchHistory');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Get the current user's profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Get by id of paper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user profile data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"    pm.expect(jsonData.data.user).to.have.property('searchHistory');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Get the current user's profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Add paper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "update paper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Delete paper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				}
			]
		},
		{
			"name": "SavedPaper",
			"item": [
				{
					"name": "Get SavedPaper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Add SavedPaper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Delete SavedPaper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Update SavedPaper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				}
			]
		},
		{
			"name": "UserAuth",
			"item": [
				{
					"name": "User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user data and token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						},
						"description": "Login with existing user credentials"
					},
					"response": []
				},
				{
					"name": "User Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response contains error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('Invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"wrongPassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						},
						"description": "Test login with invalid credentials"
					},
					"response": []
				},
				{
					"name": "User Registration - Missing Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response contains error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Test registration with missing password field"
					},
					"response": []
				}
			]
		},
		{
			"name": "UserProfile",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains user profile data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"    pm.expect(jsonData.data.user).to.have.property('searchHistory');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Get the current user's profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Get User Profile - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response contains error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Test profile access without authentication token"
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response contains updated user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user.name).to.eql('John Updated Doe');",
									"    pm.expect(jsonData.data.user.email).to.eql('john.updated@example.com');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Updated Doe\",\n  \"email\": \"john.updated@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Update the current user's profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Update User Profile - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response contains error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Update\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Test profile update without authentication token"
					},
					"response": []
				},
				{
					"name": "Update User Profile - Partial Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains success flag', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Name is updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.user.name).to.eql('John Partially Updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Partially Updated\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Test partial update of user profile (only name)"
					},
					"response": []
				}
			]
		},
		{
			"name": "UserHistory",
			"item": [
				{
					"name": "Get user history",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get user history by id",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Add user history",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Delete user history Copy",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response contains welcome message', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Welcome to IntelliCite');",
							"    pm.expect(jsonData.status).to.eql('Server is running successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Check if the server is running"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		}
	]
}